*ParaMenu.txt*   Keystroke-efficient menu system

                  ParaMenu USER MANUAL - by Daniel Thau

ParaMenu

1. Description                                        |ParaMenu-intro|
2. Usage                                              |ParaMenu-usage|
3. Navigation                                         |ParaMenu-navigation|
4. Metadata characters                                |ParaMenu-metadata|
5. Configuration                                      |ParaMenu-configuration|
6. Developing for ParaMenu                            |ParaMenu-development|
7. ParaBuffers                                        |ParaBuffers|
8. ParaTags                                           |ParaTags|
9. ParaQuickFix                                       |ParaQuickFix|

==============================================================================
1. Description                                                *ParaMenu-Intro*

Many tasks done with Vim can be achieved in an extremely keystroke-efficient
manner, but sadly there are exceptions which are a bit more tedious than
necessary.  ParaMenu is a simple framework for creating keystroke-efficient
user interfaces.  It should be fit to be used in most situations where the user
needs to select an item from a list of items.  In practice, this can end up
saving a number of keystrokes compared to quickfix-window-style (e.g. |:cwindow|)
or cmdline-style (e.g. |:ls|, |:bn|, |:b|) selection.  At the very least,
they require input to be completed with a <cr> whereas ParaMenu does not. ;)

For each item the user may select, ParaMenu will display a series of keys
corresponding to that item.  When the user enters those keys, the item will be
selected.  The series of keys will be as short as possible while still being
able to uniquely describe each item.

ParaMenu is bundled with three commands which utilize this functionality:
|ParaBuffers| for managing buffers, |ParaTags| for managing ctags, and
|ParaQuickFix|, an alternate interface for |:cwindow|.

==============================================================================
2. Usage                                                      *ParaMenu-usage*

Normally, the end user will not call ParaMenu directly.  Rather, some other
script (such as |ParaBuffers|, |ParaTags|, and |ParaQuickFix)| will call
ParaMenu.  When called, ParaMenu will display a list of items. Each item will
have at least three components:
1. The very first column may contain a character indicating something special
   about the item.  For example, it may contain a "%" to indicate the item is
   somehow related to the current buffer.
2. The next columns (up until a space) indicate a series of keys the user may
   enter to select the item.  This may be absent if the item is not selectable
   (for example, if the item is a comment).
3. After the second component will be a space.  Everything after this space is
   used to describe the item itself.  For example, if the calling script is
   being used to select a buffer, this space will be used to give the buffer's
   name.
Several examples of lines of ParaMenu's output:

	+bc ParaMenu.txt
	^                Metadata indicating the item is unsaved.
	 ^^              Entering "bc" will select this item.
	    ^^^^^^^^^^^^ The item is called "ParaMenu.txt".
	
	
	 j cmdline-window
	^                 There is no metadata for this item.
	 ^                Entering "j" will select this item.
	   ^^^^^^^^^^^^^^ The item is called "cmdline-window".
	
	
	"   Functions
	^             Metadata indicating the item is a comment.
	 ^^           There is no key series because the item cannot
	              be selected.
	    ^^^^^^^^^ The comment is "Functions".

In addition to entering the key series to select an item, the user can use one
of a list of special keys.  Unlike the key series keys, once ParaMenu sees a
special key it will immediately return that value to the calling script.  One
example is <esc>, which may be used to abort.  The actual usage of these
special keys is up to the calling script.

The list of items may be to long to display in its entirety in on the screen at
once.  In addition to selection-keys and special-keys, the user may also input
keys to navigate the contents of window, search the contents of the window, or
filter out unwanted items in the window.

==============================================================================
3. Navigation                                            *ParaMenu-navigation*

A number of key bindings are available for navigating ParaMenu's output.  The
exact bindings for these navigation commands are configurable, see
|ParaMenu-configuration|.

Name           Default Binding   Functionality
------------------------------------------------------------------------------
ScrollDown     <c-y>             Scrolls window down one line
ScrollUp       <c-e>             Scrolls window up one line
PageDown       <c-f>             Scrolls window down one screen
PageUp         <c-b>             Scrolls window up one screen
HalfPageDown   <c-d>             Scrolls window down half a screen
HalfPageUp     <c-u>             Scrolls window up half a screen
LastLine                         Moves to last line
FirstLine                        Moves to first line
LastFirstLine  <c-g>             Moves to last line, unless on last, then moves
                               to first line
Search         /                 Searches downward
BackwardSearch ?                 Searches upward
ClearSearch    <c-l>             Clears search highlighting
Filter         <c-r>             Filters out lines from output
ClearFilter    <c-t>             Returns output to un-filtered state

==============================================================================
4. Metadata characters                                     *ParaMenu-metadata*

Metadata characters are characters which may be in the first line of an item
which indicate some attribute of the item.  With the exception of " and ^, they
are only used within ParaMenu for syntax highlighting.  " and ^ also indicate
that the item is not selectable, and so ParaMenu will not provide a key series
to select it.

Character   Meaning
------------------------------------------------------------------------------
"           Line is a comment; not selectable.
^           Line is a continuation of the item above it; for the purposes of
          selection there is no difference between it and the line above it.
%           The item is related to the current buffer.
#           The item is related to the alternate buffer.
+           The item is related to an unsaved buffer.
!           The item has some warning or importance related to it.
{blank}     The item is a normal item with nothing special about it.

==============================================================================
5. Configuration                                      *ParaMenu-configuration*

There are three groups of keys the user could input to instruct ParaMenu to do
something:
1. Selection keys, which are used to select an item
2. Navigation keys, which are used to navigate the output
3. Special keys, which immediately return their value to the calling function
All of these keys can be customized by setting a variable in your vimrc.  If
the variable is absent, ParaMenu will use default values.

                                                       *ParaMenuSelectionKeys*
The selection keys default to the lowercase English letters a-z.  To set them
to something else, simply set the variable g:ParaMenuSpecialKeys to a list of
strings, where each string is a single printable and typable character.  For
example, if you would like to only have to use the qwerty home-row (to make
ParaMenu act a bit like lustyjuggler), place the following in your vimrc:

	let g:ParaMenuSelectionKeys = ["a","s","d","f","g","h","j","k","l",";"]

Note that making this list short means that, if the list of selectable items is
long, you will have to press more keys.  If you'd prefer to type fewer keys,
even if they are harder-to-press keys, you could for example set ParaMenu to
use all of the lowercase and uppercase English letters and the digits 0-9 like
so:

	let g:ParaMenuSelectionKeys = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","0","1","2","3","4","5","6","7","8","9"]

Note that if you try to use non-printable characters (such as <c-h>), the
output will be messed up and there is no guarantee ParaMenu will function
properly.

                                                      *ParaMenuNavigationKeys*
The default navigation keys can be found in |ParaMenu-navigation|.  If you
would like to use non-defaults, set the variable g:ParaMenuNavigationKeys to a
dictionary pairing a string representing the key you would like to use with the
name of the functionality you would like, as described in
|ParaMenu-navigation|.  For example, if you would like to explicitly set the
defaults, place the following in your vimrc:

	let g:ParaMenuNavigationKeys = {"\<c-y>": "ScrollUp", "\<c-e>": "ScrollDown", "\<c-f>": "PageDown", "\<c-b>": "PageUp", "\<c-d>": "HalfPageDown", "\<c-u>": "HalfPageUp", "/": "Search", "?": "BackwardSearch", "\<c-r>": "Filter", "\<c-t>": "ClearFilter", "\<c-n>": "SearchNext", "\<c-p>": "SearchPrevious", "\<c-l>": "ClearSearch", "\<c-g>": "LastFirstLine"}

Note that unlike with selection keys, there should be no problem using
non-printable values for navigation keys so long as Vim recognizes them.  To
test, try the following out:

	:echo nr2char(getchar()) == "\<c-h>"

and enter ctrl-h.  You should see a "1" echoed back.  Feel free to replace the
quoted section with whatever you would like to be used.  So long as you get a
"1" back when you run that command and type the value you want to trigger it,
it should be safe for ParaMenu.

                                                         *ParaMenuSpecialKeys*
Finally, the special keys can also be customized.  To do so, set the variable
g:ParaMenuSpecialKeys to a list of strings representing the key you would like
to use.  You can use the same :echo command as used above in
|ParaMenuNavigationKeys| to find a valid key description for navigation keys to
find a value for special keys.  To explicitly set the default, place the
following in your vimrc:

	let g:ParaMenuSpecialKeys = ["\<esc>","\<space>","\<cr>","\<tab>","*"]

The order, combined with the settings for whatever is calling ParaMenu, will
indicate what each key does.  It is recommended to leave <esc> as the first
value so that any script calling ParaMenu can use that to abort.

==============================================================================
6. Developing for ParaMenu                              *ParaMenu-development*

Developing a script to utilize ParaMenu is relatively simple.  ParaMenu itself
is just a function with two arguments.
1. The first argument is a string containing the list of items you would like
   displayed.  This will be referred to as "output."
2. The second argument is a list of one-character strings indicating the
   attributes of each line of output.  See |ParaMenu-metadata|.  Note that
   there should be exactly as many items in this list as there are lines in
   the output.  This list will be referred to as "metadata."

ParaMenu will return one of the following:
1. A number relating the line in output (and the item in metadata)
   corresponding to what the user selected.  These values will all be positive;
   the first line is 1.
2. A negative number relating to the special key pressed.  If the first value
   from g:ParaMenuSpecialKeys - or the first value in the default special
   keys - is pressed by the user, ParaMenu will return -1.  For the second,
   ParaMenu will return -2, etc.
3. If no valid item was selected and no valid special key was pressed, ParaMenu
   will return a 0.

A general structure you can use follows:
1. Gather needed information to generate output and metadata
2. Generate (a) output, (b) metadata, and (c) some mapping between the values
   which ParaMenu will return and what you want to do with respect to them.
   For example, if you're making a script to switch to a buffer, you should map
   each value ParaMenu could return to the buffer number you would like to
   switch to if selected.
3. Call ParaMenu:  "let input = ParaMenu(output, metadata)"
4. Make a if/elseif/endif block for each possible special key value returned
5. Deal with a valid returned value for a selected item
6. Depending on the script you are making, you may now need to re-run steps 2-6.
7. If successfully used a special or selected value, return
8. Otherwise, indicate to the user that he or she inputted some value you can't
   use and return

Additionally, I recommend allowing the user create a global variable in his or
her vimrc which maps the special key return values (-1, -2, etc) to some string
indicating what your script should do with it.  For example, |ParaBuffers| uses
the following code:

	if exists("g:ParaBuffersSpecialKeyMap")
		let l:special_keys_map = g:ParaBuffersSpecialKeyMap
	else
		let l:special_keys_map = {-1: "Abort", -2: "UnlistBuffer", -3: "AlternateBuffer", -4: "ForceUnlistBuffer"}
	endif

The advantage of this system is that the user can chose to have multiple
scripts which can share the same special keys without worry that they will
overlap with user-set selection or navigation keys.

==============================================================================
7. ParaBuffers                                                   *ParaBuffers*

ParaBuffers is a script used to switch to or unlist |buffers| which uses
ParaMenu for its user interface.  It can be run using

	:ParaBuffers

If you would like to make this more accessible (which is recommended), feel
free to map it to something.  For example, to map it to <f2>, you can place the
following in your vimrc:

	nnoremap <f2> :ParaBuffers<cr>

When run, ParaBuffers will display a list of buffers with some associated
metadata (specifically, whether the buffer is the current buffer, the alternate
buffer, or if it has been modified since last saved) and a key series to select
it.  Simply entering the key series will select the corresponding buffer.
ParaBuffers recognizes the following special keys:

                  Default Special Default Special
Name              Key Value       Key              Functionality
------------------------------------------------------------------------------
Abort             -1              <esc>            Aborts ParaBuffers
UnlistBuffer      -2              <space>          Unlists a buffer
AlternateBuffer   -3              <cr>             Selects alternate buffer
ForceUnlistBuffer -4              <tab>            Force unlists a buffer

To customize which special key value is paired with what functionality, set the
variable g:ParaBuffersSpecialKeyMap as a dictionary pairing the special key
value to the name in the above table.  For example, to explicitly set the
default:

	let g:ParaBuffersSpecialKeyMap = {-1: "Abort", -2: "UnlistBuffer", -3: "AlternateBuffer", -4: "ForceUnlistBuffer"}

To set the key associated with the key value, see |ParaMenuNavigationKeys|.

If Abort is given, ParaBuffers aborts immediately without changing buffers.  If
AlternateBuffer is given, ParaBuffers will switch you to the alternate buffer
(equivilent to hitting |ctrl-6|).  If UnlistBuffer is given, followed by a key
series for a buffer, that buffer is unlisted.  If UnlistBuffer is followed by
UnlistBuffer (or ForceUnlistBuffer), the current buffer is unlisted.  If
UnlistBuffer is followed by the alternate buffer, the alternate buffer is
unlisted.  ForceUnlistBuffer acts like UnlistBuffer, except it forces the
buffer to be unlisted even if it has been modified since last saved.

==============================================================================
8. ParaTags                                                         *ParaTags*

ParaTags is a script used to jump to |ctags| which uses ParaMenu for its user
interface. It can be run using

	:ParaTags

If you would like to make this more accessible (which is recommended), feel
free to map it to something.  For example, to map it to <f3>, you can place the
following in your vimrc:

	nnoremap <f3> :ParaTags<cr>

ParaTags requires the exuberant-ctags to be installed.  When run, ParaTags will
display a list of tags as determined by ctags across all of your open buffers.
Each tag will be paired with metadata describing the buffer it is in, noting
whether the buffer is the current buffer, the alternate buffer, or a modified
buffer.  Additionally, each tag will have a series of keys by it.  When these
keys are entered, ParaTags will jump the cursor to the corresponding line in
the corresponding buffer.  Additionally, ParaTags recognizes the following
special keys:

                  Default Special Default Special
Name              Key Value       Key              Functionality
------------------------------------------------------------------------------
Abort             -1              <esc>            Aborts ParaTags
TagUnderCurosr    -2, -5          <space>, *       Jumps to definition of item
                                                 under cursor

To customize which special key value is paired with what functionality, set the
variable g:ParaTagsSpecialKeyMap as a dictionary pairing the special key
value to the name in the above table.  For example, to explicitly set the
default:

	let g:ParaTagsSpecialKeyMap = {-1: "Abort", -2: "TagUnderCursor", -5: "TagUnderCursor"}

To set the key associated with the key value, see |ParaMenuNavigationKeys|.

Entering Abort will abort ParaTags without jumping to a tag.  If TagUnderCursor
is given, ParaTags will jump to the definition of the word under the cursor if
a tag for it can be found.

==============================================================================
9. ParaQuickFix                                                 *ParaQuickFix*

ParaTags is a script used as an alternate interface to the |quickfix| window,
which uses ParaMenu as a user interface.  It can be run using

	:ParaQuickFix

If you would like to make this more accessible (which is recommended), feel
free to map it to something.  For example, to map it to <f4>, you can place the
following in your vimrc:

	nnoremap <f4> :ParaQuickFix<cr>

When run, ParaQuickFix will display the current quickfix items.  Each tag will
be paired with metadata describing the buffer it is in, noting whether the
buffer is the current buffer, the alternate buffer, or a modified buffer.
Additionally, each item will have a series of keys by it.  When these keys are
entered, ParaQuickFix will jump the cursor to the corresponding line and column
in the corresponding buffer.  Additionally, ParaQuickFix recognizes the following
special key:

                  Default Special Default Special
Name              Key Value       Key              Functionality
------------------------------------------------------------------------------
Abort             -1              <esc>            Aborts ParaQuickFix

To customize which special key value is paired with Abort, set the variable
g:ParaQuickFixSpecialKeyMap as a dictionary pairing the special key value to
Abort.  For example, to explicitly set the default:

	let g:ParaQuickFixSpecialKeyMap = {-1: "Abort"}

To set the key associated with the key value, see |ParaMenuNavigationKeys|.

Entering Abort will abort ParaQuickFix without jumping to a quickfix item.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
