*ParaMenu.txt*   Keystroke-efficient menu system

                  ParaMenu USER MANUAL - by Daniel Thau

ParaMenu

1. Description                                        |ParaMenu-intro|
2. Usage                                              |ParaMenu-usage|
3. Configuration                                      |ParaMenu-configuration|
4. Developing for ParaMenu                            |ParaMenu-development|
5. ParaBuffers                                        |ParaBuffers|
6. ParaTags                                           |ParaTags|
7. ParaQuickFix                                       |ParaQuickFix|

==============================================================================
1. Description                                                *ParaMenu-Intro*

Many tasks done with Vim can be achieved in an extremely keystroke-efficient
manner, but sadly there are exceptions which are a bit more tedious than
necessary.  ParaMenu is a simple framework for creating keystroke-efficient
user interfaces.  It should be fit to be used in most situations where the user
needs to select an item from a list of items.  In practice, this can end up
saving a number of keystrokes compared to quickfix-window-style (e.g. |:cwindow|)
or cmdline-style (e.g. |:ls|, |:bn|, |:b|) selection.  At the very least,
they require input to be completed with a <cr> whereas ParaMenu does not. ;)

For each item the user may select, ParaMenu will display a series of keys
corresponding to that item.  The user may enter a string from one of these
items to select it, or enter from the paired series of keys to select it.

ParaMenu is bundled with three commands which utilize this functionality:
|ParaBuffers| for managing buffers, |ParaTags| for managing ctags, and
|ParaQuickFix|, an alternate interface for |:cwindow|.

==============================================================================
2. Usage                                                      *ParaMenu-usage*

Normally, the end user will not call ParaMenu directly.  Rather, some other
script (such as |ParaBuffers|, |ParaTags|, and |ParaQuickFix)| will call
ParaMenu.  When called, ParaMenu will display a list of items. Each item will
have at least three components:
1. The very first column(s) (up until a space) indicate a series of keys the
   user may enter to select the item.  This may be absent if the item is not
   selectable (for example, if the item is a comment).  Upon entering these
   keys, they will be shown in the input line at the very bottom between square
   brackets.  When enough of these have been inputted to uniquely identify a
   selectable item, the item will be selected.
1. The next few columns may contain additional information about the item.  For
   example, it may contain a "%" to indicate the item is somehow related to the
   current buffer, or it may contain the a filename corresponding to the item.
   Entering the text for this part does nothing.
3. The final part will be the item itself.  For example, if the calling script is
   being used to select a buffer, this space will be used to give the buffer's
   name.  Upon entering tect from the item itself, the text will be shown at
   the very bottom in the input line after the square brackets.  When enough of
   the item's text has been inputted to uniquely select the item it will be
   selected.  If multiple items share the same text, the series of keys from
   the first column(s) can be used to uniquely select one of the items.
Several examples of lines of ParaMenu's output:
   0 # ParaMenu.txt
   ^                Entering "0" will select this item.
     ^              "#" indicates the item is the alternate buffer
       ^^^^^^^^^^^^ The item is called "ParaMenu.txt" - entering enough of
                    "ParaMenu.txt" to uniquely identify this item will select
                    it.


   1  cmdline-window
   ^                 Entering "1" will select this item.
    ^^               There is no metadata for this item.
      ^^^^^^^^^^^^^^ The item is called "cmdline-window" - entering enough of
                     "cmdline-window" to uniquely identify this item will
                     select it.


       Functions
   ^             There is no key series because the item cannot
                 be selected.
     ^           There is no metadata either.
       ^^^^^^^^^ The comment is "Functions".  Since there is no key series, it
                 is not selectable.

In addition to selecting an item, the user can use one of a list of special
keys.  Once ParaMenu sees a special key it will immediately return that value
to the calling script.  One example is <esc>, which may be used to abort.  The
actual usage of these special keys is up to the calling script.

The list of items may be to long to display in its entirety in on the screen at
once.  If additional items are available but not displayed, a "..." will be
shown as the last item.  Future versions of ParaMenu may include a way to
scroll down to see these items.

==============================================================================
3. Configuration                                      *ParaMenu-configuration*

There are two groups of keys the user could input to instruct ParaMenu to do
something:
1. Selection keys, which are used to select an item
2. Special keys, which immediately return their value to the calling function
All of these keys can be customized by setting a variable in your vimrc.  If
the variable is absent, ParaMenu will use default values.

                                                       *ParaMenuSelectionKeys*
The selection keys default to the digits 0-9.  To set them to something else,
simply set the variable g:ParaMenuSelectionKeys to a list of strings, where
each string is a single typable character.  For example, if you would like to
only have to use the qwerty home-row (to make ParaMenu act a bit like
lustyjuggler), place the following in your vimrc:

    let g:ParaMenuSelectionKeys = ["a","s","d","f","g","h","j","k","l",";"]

Note that these take priority over entering the text of the item to select it,
and so one could not select a buffer called "faad" by typing the name of the
buffer, but would rather have to use the selection keys.  As an alternative,
one could use the ctrl'd version of the selection keys like so:

    let g:ParaMenuSelectionKeys = ["\<c-a>","\<c-s>","\<c-d>","\<c-f>","\<c-g>","\<c-h>","\<c-j>","\<c-k>","\<c-l>"]

However, since these are not normally printable characters, the output will be
messed up.  To compensate for this, one will likely have to also set up
|ParaMenuSelectionKeysDisplay|.  See the relevant section below.
                                                *ParaMenuSelectionKeysDisplay*

If using no-printable selection keys, it may be advisable to set up alternative
character(s) to display instead.  This can be done by setting the
g:ParaMenuSelectionKeysDisplay variable.  Each item will correspond to the item
in g:ParaMenuSelectionKeys with the same index.  For example, if one is using
the ctrl'd version of the qwerty homerow keys, this may be a the desired setting:

    let g:ParaMenuSelectionKeysDisplay = ["^A","^S","^D","^F","^G","^H","^J","^K","^L"]

Note that these values are just for the user.  If the user knows that the
selection keys are all ctrl'd and wants to conserve space, this will work as
well:

    let g:ParaMenuSelectionKeysDisplay = ["A","S","D","F","G","H","J","K","L"]

                                                  *ParaMenuSelectionDirection*
By default, the key sequence is generated by iterating through all of the
values in the right-most item in the key series, then it increments the item to
the left and reverts the right-most to the first value.  This is quite simlar
the arabic numeral system.  For example, if the key series is ["0","1"], and
there are four selectable items, the key series  will be generated in the
following order:

    00
    01
    10
    11

However, if you would like, you can reverse the direction by setting the
variable g:ParaMenuSelectionDirection to 1.  You can do so by placing the
following in your vimrc:

    let g:ParaMenuSelectionDirection = 1

If you do so, the key series example given above will be generated in the
following order:

    00
    10
    01
    11

                                                         *ParaMenuSpecialKeys*
The special keys can also be customized.  To do so, set the variable
g:ParaMenuSpecialKeys to a list of strings representing the key you would like
to use.  To explicitly set the default, place the following in your vimrc:

    let g:ParaMenuSpecialKeys = ["\<esc>","\<cr>","\<tab>"]

The order, combined with the settings for whatever is calling ParaMenu, will
indicate what each key does.  It is recommended to leave <esc> as the first
value so that any script calling ParaMenu can use that to abort.

==============================================================================
4. Developing for ParaMenu                              *ParaMenu-development*

Developing a script to utilize ParaMenu is relatively simple.  ParaMenu itself
is just a function with one argument: a list containing the items to be
selected.  Each item is itself a list containing the various information
required by ParaMenu for the corresponding item.
1. The first item in the list is the string to be displayed/selected.  For
   example, if the you want the user to select a buffer from a list of buffers,
   this would be the name of the buffer.
2. The second item is a string containing the metadata you would like displayed
   for the item.  For example, "%" could be used to indicate the item is somehow
   related to the current buffer.
3. The third item is the highlighting group name to color the item with.  If
   left as an empty string (""), ParaMenu will default to the default color.
4. The last item is should be a 0 or a 1 indicating whether or not the item is
   selectable..  If it is a 0, the item will not be selectable and if it is a 1
   the item will be selectable.  This is useful if some comment should be given
   for items.

ParaMenu will return one of the following:
1. If the user selected an item, Paramenu will return the index of the item.
   This will be a non-negative number.
2. If the user inputs a special key, a negative number is returned.  If the
   first value from g:ParaMenuSpecialKeys - or the first value in the default
   special keys - is pressed by the user, ParaMenu will return -1.  For the
   second, ParaMenu will return -2, etc.

I recommend allowing the user create a global variable in his or her vimrc
which maps the special key return values (-1, -2, etc) to some string
indicating what your script should do with it.  For example, |ParaBuffers| uses
the following code:

    if exists("g:ParaBuffersSpecialKeyMap")
        let l:special_keys_map = g:ParaBuffersSpecialKeyMap
    else
        let l:special_keys_map = {-1: "Abort", -2: "AlternateBuffer", -3: "UnlistBuffer"}
    endif

The advantage of this system is that the user can chose to have multiple
scripts which can share the same special keys without worry that they will
overlap with user-set selection or navigation keys.

==============================================================================
5. ParaBuffers                                                   *ParaBuffers*

ParaBuffers is a script used to switch to or unlist |buffers| which uses
ParaMenu for its user interface.  It can be run using

    :ParaBuffers

If you would like to make this more accessible (which is recommended), feel
free to map it to something.  For example, to map it to <f2>, you can place the
following in your vimrc:

    nnoremap <f2> :ParaBuffers<cr>

When run, ParaBuffers will display a list of buffers with some associated
metadata (specifically, whether the buffer is the current buffer, the alternate
buffer, or if it has been modified since last saved) and a key series to select
it.  Simply entering the key series will select the corresponding buffer.
ParaBuffers recognizes the following special keys:

                  Default Special Default Special
Name              Key Value       Key              Functionality
------------------------------------------------------------------------------
Abort             -1              <esc>            Aborts ParaBuffers
AlternateBuffer   -2              <cr>             Selects alternate buffer
UnlistBuffer      -3              <tab>            Unlists a buffer

To customize which special key value is paired with what functionality, set the
variable g:ParaBuffersSpecialKeyMap as a dictionary pairing the special key
value to the name in the above table.  For example, to explicitly set the
default:

    let g:ParaBuffersSpecialKeyMap = {-1: "Abort", -2: "AlternateBuffer", -3: "UnlistBuffer"}

If Abort is given, ParaBuffers aborts immediately without changing buffers.  If
AlternateBuffer is given, ParaBuffers will switch you to the alternate buffer
(equivilent to hitting |ctrl-6|).  If UnlistBuffer is given, the buffer the
user selects will be unlisted.  If UnlistBuffer is given twice, the current
buffer is unlisted.

==============================================================================
6. ParaTags                                                         *ParaTags*

ParaTags is a script used to jump to |ctags| which uses ParaMenu for its user
interface. It can be run using

    :ParaTags

If you would like to make this more accessible (which is recommended), feel
free to map it to something.  For example, to map it to <f3>, you can place the
following in your vimrc:

    nnoremap <f3> :ParaTags<cr>

When run, ParaTags will display a list of tags from which the user can select
one, at which point vim will jump to the corresponding line and column in the
corresponding buffer for that tag.

ParaTags can automatically generate tags for the current buffers by setting
g:ParaTagsAutoCreate to 1:

   let g:ParaTagsAutoCreate = 1

This will use exuberant-ctags to generate a temporary tagfile for all of the
buffers based on vim's guess of the buffers' filetype on the fly when ParaTags
is called.  Otherwise, ParaTags will simple use the currently available tags.

ParaTags recognizes the following special keys:

                  Default Special Default Special
Name              Key Value       Key              Functionality
------------------------------------------------------------------------------
Abort             -1              <esc>            Aborts ParaTags
NextTag           -2,             <cr>             Runs |:tn|
PreviousTag       -3,             <tab>            Runs |:tp|

To customize which special key value is paired with what functionality, set the
variable g:ParaTagsSpecialKeyMap as a dictionary pairing the special key
value to the name in the above table.  For example, to explicitly set the
default:

    let g:ParaTagsSpecialKeyMap = {-1: "Abort", -2: "NextTag", -3: "PreviousTag"}

==============================================================================
7. ParaQuickFix                                                 *ParaQuickFix*

ParaTags is a script used as an alternate interface to the |quickfix| window,
which uses ParaMenu as a user interface.  It can be run using

    :ParaQuickFix

If you would like to make this more accessible (which is recommended), feel
free to map it to something.  For example, to map it to <f4>, you can place the
following in your vimrc:

    nnoremap <f4> :ParaQuickFix<cr>

When run, ParaQuickFix will display the current quickfix items.  Selecting the
item will jump to the corresponding line and column in the corresponding
buffer.  Pressing any special key will abort without jumping to a quickfix item.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
